"use client"

import { useState } from 'react'
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/shared/components/ui/dialog'
import { Button } from '@/shared/components/ui/button'
import { Input } from '@/shared/components/ui/input'
import { Label } from '@/shared/components/ui/label'
import { Badge } from '@/shared/components/ui/badge'
import type { AnalysisType } from '@/entities/analysis/model/types'

interface AnalysisQueryModalProps {
  isOpen: boolean
  onClose: () => void
  onStart: (query?: string) => void
  onSkip: () => void
  analysisType: AnalysisType
}

const QUERY_EXAMPLES = [
  '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
  '–æ–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤',
  '—Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö',
  '–≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
  '–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫',
  'API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã',
  '–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
  '–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'
]

export function AnalysisQueryModal({
  isOpen,
  onClose,
  onStart,
  onSkip,
  analysisType
}: AnalysisQueryModalProps) {
  const [query, setQuery] = useState('')

  const handleStart = () => {
    onStart(query.trim() || undefined)
    setQuery('')
  }

  const handleSkip = () => {
    onSkip()
    setQuery('')
  }

  const handleClose = () => {
    onClose()
    setQuery('')
  }

  const handleExampleClick = (example: string) => {
    setQuery(example)
  }

  const getModalTitle = () => {
    switch (analysisType) {
      case 'EXPLANATION':
        return '–¶–µ–ª–µ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞'
      case 'FULL':
        return '–¶–µ–ª–µ–≤–æ–π –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑'
      default:
        return '–¶–µ–ª–µ–≤–æ–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞'
    }
  }

  const getModalDescription = () => {
    switch (analysisType) {
      case 'EXPLANATION':
        return '–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–Ω—è—Ç—å –≤ –∫–æ–¥–µ. –°–∏—Å—Ç–µ–º–∞ –Ω–∞–π–¥–µ—Ç –∏ –æ–±—ä—è—Å–Ω–∏—Ç —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞—Å—Ç–∏.'
      case 'FULL':
        return '–û–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ –≤–∞—à–µ–π —Ç–µ–º–µ.'
      default:
        return '–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ –∫–æ–¥–µ. –°–∏—Å—Ç–µ–º–∞ –Ω–∞–π–¥–µ—Ç –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã.'
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            üéØ {getModalTitle()}
          </DialogTitle>
          <DialogDescription>
            {getModalDescription()}
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          <div>
            <Label htmlFor="query">
              –¢–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            </Label>
            <Input
              id="query"
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
              className="mt-1"
            />
          </div>

          <div>
            <Label className="text-sm font-medium">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã:</Label>
            <div className="flex flex-wrap gap-2 mt-2">
              {QUERY_EXAMPLES.map((example, index) => (
                <Badge
                  key={index}
                  variant="outline"
                  className="cursor-pointer hover:bg-accent transition-colors"
                  onClick={() => handleExampleClick(example)}
                >
                  {example}
                </Badge>
              ))}
            </div>
          </div>

          <div className="bg-muted/50 p-3 rounded-md">
            <div className="flex items-start gap-2">
              <div className="text-sm">
                {query.trim() ? (
                  <>
                    üéØ <strong>–¶–µ–ª–µ–≤–æ–π –∞–Ω–∞–ª–∏–∑</strong>
                    <br />
                    <span className="text-muted-foreground">
                      –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ —Ç–µ–º–µ: &quot;{query}&quot;
                    </span>
                  </>
                ) : (
                  <>
                    üìä <strong>–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑</strong>
                    <br />
                    <span className="text-muted-foreground">
                      –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
                    </span>
                  </>
                )}
              </div>
            </div>
          </div>
        </div>

        <DialogFooter className="gap-2">
          <Button variant="outline" onClick={handleClose}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button variant="outline" onClick={handleSkip}>
            –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
          </Button>
          <Button onClick={handleStart}>
            {query.trim() ? '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π –∞–Ω–∞–ª–∏–∑' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}
