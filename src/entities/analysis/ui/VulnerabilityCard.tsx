"use client"

import { Badge } from '@/shared/components/ui/badge'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/shared/components/ui/card'
import { 
  Shield, 
  AlertTriangle, 
  ExternalLink,
  Copy,
  Check
} from 'lucide-react'
import { useState } from 'react'
import type { VulnerabilityDto } from '../model/types'

interface VulnerabilityCardProps {
  vulnerability: VulnerabilityDto
}

export function VulnerabilityCard({ vulnerability }: VulnerabilityCardProps) {
  const [copied, setCopied] = useState(false)
  
  console.log('VulnerabilityCard рендерится с данными:', vulnerability)
  console.log('Поля уязвимости:', {
    id: vulnerability.id,
    title: vulnerability.title,
    description: vulnerability.description,
    severity: vulnerability.severity,
    impact: vulnerability.impact,
    priority: vulnerability.priority,
    type: vulnerability.type,
    category: vulnerability.category,
    recommendation: vulnerability.recommendation,
    suggestion: vulnerability.suggestion
  })

  // Защита от некорректных данных
  if (!vulnerability || typeof vulnerability !== 'object') {
    console.error('VulnerabilityCard получил некорректные данные:', vulnerability)
    return (
      <Card className="border-l-4 border-l-red-500">
        <CardContent className="p-4">
          <p className="text-red-600">Ошибка: некорректные данные уязвимости</p>
        </CardContent>
      </Card>
    )
  }

  const getSeverityColor = (severity?: string) => {
    if (!severity) return 'secondary'
    switch (severity.toUpperCase()) {
      case 'CRITICAL':
        return 'destructive'
      case 'HIGH':
        return 'destructive'
      case 'MEDIUM':
        return 'secondary'
      case 'LOW':
        return 'outline'
      case 'INFO':
        return 'outline'
      default:
        return 'secondary'
    }
  }

  const getSeverityIcon = (severity?: string) => {
    if (!severity) return <Shield className="h-4 w-4" />
    switch (severity.toUpperCase()) {
      case 'CRITICAL':
      case 'HIGH':
        return <AlertTriangle className="h-4 w-4" />
      case 'MEDIUM':
        return <Shield className="h-4 w-4" />
      default:
        return <Shield className="h-4 w-4" />
    }
  }

  // Безопасное получение строкового значения
  const getStringValue = (value: unknown): string => {
    if (typeof value === 'string') return value
    if (typeof value === 'number') return value.toString()
    if (typeof value === 'boolean') return value.toString()
    if (value === null || value === undefined) return ''
    return JSON.stringify(value)
  }

  // Получаем severity из разных возможных полей
  const getSeverity = () => {
    const severity = vulnerability.severity || vulnerability.impact || vulnerability.priority || 'UNKNOWN'
    return getStringValue(severity)
  }

  // Получаем тип из разных возможных полей
  const getType = () => {
    const type = vulnerability.type || vulnerability.category || 'Unknown'
    return getStringValue(type)
  }

  // Получаем рекомендацию из разных возможных полей
  const getRecommendation = () => {
    const recommendation = vulnerability.recommendation || vulnerability.suggestion || 'Рекомендация не предоставлена'
    return getStringValue(recommendation)
  }

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    } catch (error) {
      console.error('Ошибка копирования:', error)
    }
  }

  return (
    <Card className="border-l-4 border-l-orange-500">
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="flex items-center gap-2">
            {getSeverityIcon(getSeverity())}
            <CardTitle className="text-lg">{getStringValue(vulnerability.title)}</CardTitle>
            <Badge variant={getSeverityColor(getSeverity())}>
              {getSeverity()}
            </Badge>
          </div>
          <div className="flex items-center gap-2">
            <span className="text-sm text-muted-foreground">
              {getStringValue(vulnerability.filePath)}:{vulnerability.lineStart}
              {vulnerability.lineEnd !== vulnerability.lineStart && `-${vulnerability.lineEnd}`}
            </span>
          </div>
        </div>
        <CardDescription className="text-sm">
          {getStringValue(vulnerability.description)}
        </CardDescription>
      </CardHeader>

      <CardContent className="space-y-4">
        {/* Тип уязвимости */}
        <div className="flex items-center gap-2">
          <span className="text-sm font-medium">Тип:</span>
          <Badge variant="outline">{getType()}</Badge>
          {vulnerability.cwe && (
            <Badge variant="outline" className="flex items-center gap-1">
              <ExternalLink className="h-3 w-3" />
              {getStringValue(vulnerability.cwe)}
            </Badge>
          )}
        </div>

        {/* Код с уязвимостью */}
        <div className="relative">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium">Код с уязвимостью:</span>
            <button
              onClick={() => copyToClipboard(vulnerability.codeSnippet)}
              className="flex items-center gap-1 text-xs text-muted-foreground hover:text-foreground"
            >
              {copied ? (
                <Check className="h-3 w-3" />
              ) : (
                <Copy className="h-3 w-3" />
              )}
              {copied ? 'Скопировано' : 'Копировать'}
            </button>
          </div>
          <div className="bg-muted p-3 rounded text-sm font-mono overflow-x-auto">
            <pre className="whitespace-pre-wrap">{getStringValue(vulnerability.codeSnippet)}</pre>
          </div>
        </div>

        {/* Рекомендация по исправлению */}
        <div>
          <span className="text-sm font-medium">Рекомендация по исправлению:</span>
          <div className="mt-1 p-3 bg-green-50 dark:bg-green-950/20 rounded text-sm">
            <p className="text-green-800 dark:text-green-200">
              {getRecommendation()}
            </p>
          </div>
        </div>

        {/* Метаданные */}
        <div className="text-xs text-muted-foreground pt-2 border-t">
          {vulnerability.createdAt && (
            <div>Создано: {new Date(vulnerability.createdAt).toLocaleString('ru-RU')}</div>
          )}
          <div>ID: {getStringValue(vulnerability.id)}</div>
        </div>
      </CardContent>
    </Card>
  )
}